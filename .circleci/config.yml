# Golang CircleCI 2.0 configuration file
#
# Settings via the UI:
# - Configured GOOGLE_CLOUD_PROJECT environment variable
# - Configured SERVICE_ACCOUNT_KEY with the key contents
# - Only building PRs
# - Auto-canceling redundant builds
#
# Settings in GCP
# - Create service account, get keys
# - Add Project Viewer, Container Build Editor to Service account
# - Add the following ACLs
#   - gsutil iam ch serviceAccount:circleci@PROJECT.iam.gserviceaccount.com:objectViewer gs://PROJECT_cloudbuild
#   - gsutil iam ch serviceAccount:circleci@PROJECT.iam.gserviceaccount.com:objectCreator gs://PROJECT_cloudbuild
#   - gsutil iam ch serviceAccount:circleci@PROJECT.iam.gserviceaccount.com:objectCreator gs://artifacts.PROJECT.appspot.com
#   (GCR bucket has some name variations)
#
# @todo consider adding caching to test process,
#       many go commands retrieve dependencies.
# @todo base64 encode the SERVICE_ACCOUNT_KEY
#       for some light obfuscation security.

version: 2
jobs:
  test:
    docker:
      # The workspace for the CI build, based on go 1.12.
      # Alternative: Circle doesn't know we're using Go,
      # instead we build a test.Dockerfile and whatever happens
      # in the build is our CI result.
      - image: circleci/golang:1.12

    environment:
      GO111MODULE: "on"
      TEST_RESULTS: "/tmp/test-results"

    working_directory: /go/src/github.com/grayside/test
    steps:
      - checkout
      - run:
          name: Lint
          command: go fmt .
      - run:
          name: Test
          command: go test -v .
    
  # https://github.com/hadolint/hadolint
  docker-lint:
    docker:
      # Any container that can run docker, really.
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/grayside/test
    steps:
      - checkout
      - setup_remote_docker
      - run: docker run --rm -i hadolint/hadolint < Dockerfile

  # https://vsupalov.com/build-docker-image-with-circle-ci-2-push-to-google-container-registry/
  build-and-push:
    docker:
      # The workspace for the CI build, based on go 1.12.
      # Alternative: Circle doesn't know we're using Go,
      # instead we build a test.Dockerfile and whatever happens
      # in the build is our CI result.
      - image: google/cloud-sdk

    environment:
      GO111MODULE: "on"
      CLOUDSDK_CORE_DISABLE_PROMPTS: "1"

    working_directory: /go/src/github.com/grayside/test
    steps:
      - checkout
      - run:
          name: Build Context
          command: env
      - run:
          name: Prepare GCP Service Account Credentials
          command: |
            echo ${SERVICE_ACCOUNT_KEY} > ${HOME}/sa-key.json
            gcloud auth activate-service-account --key-file ${HOME}/sa-key.json
            gcloud --quiet config set project $GOOGLE_CLOUD_PROJECT
      # Build
      - run:
          name: Build & Push Docker Image
          command: |
            gcloud builds submit \
            --tag gcr.io/$GOOGLE_CLOUD_PROJECT/test:$CIRCLE_SHA1 \
            .
      # Push
      - run:
          name: Add Branch Name as Docker Tag  
          when: on_success
          command: |
            gcloud container images add-tag \
            gcr.io/$GOOGLE_CLOUD_PROJECT/test:$CIRCLE_SHA1 \
            gcr.io/$GOOGLE_CLOUD_PROJECT/test:$CIRCLE_BRANCH    

# https://circleci.com/docs/2.0/workflows/
workflows:
  version: 2
  test-build-and-push:
    jobs:
      - test
      - docker-lint
      - build-and-push:
          requires:
            - test
            - docker-lint
      